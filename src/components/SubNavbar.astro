---
import { linkSegments } from '@/lib/utils';
import { makeNavbarEntries, navbarConfig, type NavbarConfig } from './schema';

interface Props {
  sublist?: NavbarConfig;
}

const { sublist } = Astro.props;
// const { links } = Astro.props;

// get the first segment of the url with a slash
const subnavSection = `/${linkSegments(Astro.url.pathname)[0]}`;

/* either:
  - it's the "/" root page and has no subnav
  - the route's *.astro has given us in sublist
  - or we default to fetching it from navbarConfig.

  Anything else is an error.

  A page must at least define a subnav as an empty NavbarConfig. */
const subnavConfig =
  (Astro.url.pathname == '/' && []) ||
  Astro.props.sublist ||
  navbarConfig.items.filter((cfg) => {
    return cfg.link === subnavSection;
  })[0];

function markCurrent(path: string[], link: string[]) {
  // TODO this will need to change
  return path[0] === link[0] && path[1] === link[1];
}

const subnavEntries = makeNavbarEntries(
  subnavConfig.items || [],
  Astro.url,
  markCurrent,
);
---

<nav slot="subnav" class="bg-gray-50">
  <div class="max-w-screen-xl px-4 py-3 mx-auto">
    <div class="flex items-center">
      <ul
        class="flex flex-row font-medium mt-0 space-x-8 rtl:space-x-reverse text-sm"
      >
        {
          subnavEntries.map((a) => (
            <li>
              <a
                href={a.href}
                class="text-gray-900 hover:underline"
              >
                {a.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>
